{"version":3,"sources":["components/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","props","react_default","a","createElement","className","id","title","card","quote","style","col","anime","bg","character","onClick","fetchData","href","target","index_es","icon","faTwitterSquare","App","_useState","useState","_useState2","Object","slicedToArray","setQuote","_useState3","_useState4","image","setImage","images","_useState5","_useState6","color","setColor","colors","fetchQuote","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","abrupt","sent","stop","apply","this","arguments","_fetchData","_callee2","_context2","t0","t1","Math","floor","random","length","myStyle","backgroundColor","backgroundImage","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9da658d2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTwitterSquare } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\n\r\nexport default function Quote(props) {\r\n    return (\r\n        <div className=\"quote\" id=\"quote-box\">\r\n            \r\n            <blockquote title={props.card.quote} style={props.col} id=\"text\">\r\n                {props.card.quote}\r\n            </blockquote>\r\n            <hr/>\r\n            <div className=\"anime\" title={props.card.anime} style={props.bg} >{props.card.anime}</div>\r\n            <div className=\"character\" title={props.card.character} style={props.bg} id=\"author\">{props.card.character}</div>\r\n\r\n            <button onClick={props.fetchData} style={props.col} id=\"new-quote\">New Quote</button>\r\n\r\n            \r\n            <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\" target=\"_blank\"><FontAwesomeIcon icon={faTwitterSquare} className=\"icons\"/></a>\r\n            \r\n      \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import Quote from \"./components/Quote\"\r\nimport React, { useState} from \"react\"\r\n// import Header from \"./components/Header\"\r\n// import Icons from \"./components/Icons\"\r\n \r\n\r\n\r\nexport default function App() {\r\n  const [quote, setQuote] = useState({\r\n    anime: \"One Piece\",\r\n    character: \"Trafalgar D. Water Law\",\r\n    quote: \"The weak donâ€™t get to decide anything, not even how they die.\"\r\n  })\r\n\r\n  const [image, setImage] = useState('url(\"Images/one-loop5.gif\")')\r\n\r\n  var images = ['url(\"Images/one-loop.gif\")', 'url(\"Images/one-loop2.gif\")']\r\n\r\n  function changeImage() {\r\n    setImage(images[Math.floor(Math.random() * images.length)])\r\n  }\r\n\r\n\r\n\r\n  const [color, setColor] = useState(\"#07687b\")\r\n\r\n  var colors = ['#1e6da0', '#378dae', '#3c7596', '#00245c', '#438d98', '#675390', '#3c377b']\r\n\r\n  function changeColor() {\r\n    setColor(colors[Math.floor(Math.random() * colors.length)])\r\n  }\r\n\r\n\r\n  const fetchQuote = async() => {\r\n    return await fetch('https://animechan.vercel.app/api/random')\r\n    .then(response => response.json())\r\n  }\r\n\r\n  async function fetchData() {\r\n      setQuote(await fetchQuote())\r\n      changeColor()\r\n      changeImage()\r\n    }\r\n\r\n  // const image = 'url(\"Images/one-loop5.gif\")'\r\n\r\n  const myStyle = {\r\n    backgroundColor: color,\r\n    color: color,\r\n    backgroundImage: image,\r\n    // backgroundPosition: \"center\",\r\n    // backgroundRepeat: \"no-repeat\",\r\n    // backgroundSize: \"cover\"\r\n  }\r\n\r\n  const bg = {\r\n    backgroundColor: color\r\n  }\r\n\r\n  const col = {\r\n    color: color\r\n  }\r\n\r\n  return (\r\n    <div className= \"App\" style={myStyle}>\r\n      \r\n      <Quote card={quote} bg={bg} col={col} fetchData={fetchData} style={col}/>\r\n      \r\n    </div>\r\n  )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  \r\n    <App />\r\n  \r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}